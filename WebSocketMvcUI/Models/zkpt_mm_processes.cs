//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//     Website: http://ITdos.com/Dos/ORM/Index.html
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data;
using System.Data.Common;
using Dos.ORM;
using Dos.ORM.Common;

namespace Model
{

	/// <summary>
	/// 实体类zkpt_mm_processes 。(属性说明自动提取数据库字段的描述信息)
	/// </summary>
	[Table("zkpt_mm_processes")]
	[Serializable]
	public partial class zkpt_mm_processes : Entity 
	{
		#region Model
		private long _pId;
		private string _tmark;
		private string _pName;
		private string _pIdNum;
		private string _pParentIdNum;
		private int _pSum;
		private string _pAddress;
		private DateTime _pAddTime;
		private string _pRemark;
		private bool _pIsStart;
		/// <summary>
		/// 
		/// </summary>
		public long pId
		{
			get{ return _pId; }
			set
			{
				this.OnPropertyValueChange(_.pId,_pId,value);
				this._pId=value;
			}
		}
		/// <summary>
		/// 关联表项：trojanInfo
		/// </summary>
		public string tmark
		{
			get{ return _tmark; }
			set
			{
				this.OnPropertyValueChange(_.tmark,_tmark,value);
				this._tmark=value;
			}
		}
		/// <summary>
		/// 进程名称
		/// </summary>
		public string pName
		{
			get{ return _pName; }
			set
			{
				this.OnPropertyValueChange(_.pName,_pName,value);
				this._pName=value;
			}
		}
		/// <summary>
		/// 进程ID
		/// </summary>
		public string pIdNum
		{
			get{ return _pIdNum; }
			set
			{
				this.OnPropertyValueChange(_.pIdNum,_pIdNum,value);
				this._pIdNum=value;
			}
		}
		/// <summary>
		/// 父进程ID
		/// </summary>
		public string pParentIdNum
		{
			get{ return _pParentIdNum; }
			set
			{
				this.OnPropertyValueChange(_.pParentIdNum,_pParentIdNum,value);
				this._pParentIdNum=value;
			}
		}
		/// <summary>
		/// 线程个数
		/// </summary>
		public int pSum
		{
			get{ return _pSum; }
			set
			{
				this.OnPropertyValueChange(_.pSum,_pSum,value);
				this._pSum=value;
			}
		}
		/// <summary>
		/// 路径
		/// </summary>
		public string pAddress
		{
			get{ return _pAddress; }
			set
			{
				this.OnPropertyValueChange(_.pAddress,_pAddress,value);
				this._pAddress=value;
			}
		}
		/// <summary>
		/// 添加时间
		/// </summary>
		public DateTime pAddTime
		{
			get{ return _pAddTime; }
			set
			{
				this.OnPropertyValueChange(_.pAddTime,_pAddTime,value);
				this._pAddTime=value;
			}
		}
		/// <summary>
		/// 备注信息
		/// </summary>
		public string pRemark
		{
			get{ return _pRemark; }
			set
			{
				this.OnPropertyValueChange(_.pRemark,_pRemark,value);
				this._pRemark=value;
			}
		}
		/// <summary>
		/// 进程状态 0表示结束 1 标识正常
		/// </summary>
		public bool pIsStart
		{
			get{ return _pIsStart; }
			set
			{
				this.OnPropertyValueChange(_.pIsStart,_pIsStart,value);
				this._pIsStart=value;
			}
		}
		#endregion

		#region Method
		/// <summary>
		/// 获取实体中的标识列
		/// </summary>
		public override Field GetIdentityField()
		{
			return _.pId;
		}
		/// <summary>
		/// 获取实体中的主键列
		/// </summary>
		public override Field[] GetPrimaryKeyFields()
		{
			return new Field[] {
				_.pId};
		}
		/// <summary>
		/// 获取列信息
		/// </summary>
		public override Field[] GetFields()
		{
			return new Field[] {
				_.pId,
				_.tmark,
				_.pName,
				_.pIdNum,
				_.pParentIdNum,
				_.pSum,
				_.pAddress,
				_.pAddTime,
				_.pRemark,
				_.pIsStart};
		}
		/// <summary>
		/// 获取值信息
		/// </summary>
		public override object[] GetValues()
		{
			return new object[] {
				this._pId,
				this._tmark,
				this._pName,
				this._pIdNum,
				this._pParentIdNum,
				this._pSum,
				this._pAddress,
				this._pAddTime,
				this._pRemark,
				this._pIsStart};
		}
		#endregion

		#region _Field
		/// <summary>
		/// 字段信息
		/// </summary>
		public class _
		{
			/// <summary>
			/// * 
			/// </summary>
			public readonly static Field All = new Field("*","zkpt_mm_processes");
			/// <summary>
			/// 
			/// </summary>
			public readonly static Field pId = new Field("pId","zkpt_mm_processes","pId");
			/// <summary>
			/// 关联表项：trojanInfo
			/// </summary>
			public readonly static Field tmark = new Field("tmark","zkpt_mm_processes","关联表项：trojanInfo");
			/// <summary>
			/// 进程名称
			/// </summary>
			public readonly static Field pName = new Field("pName","zkpt_mm_processes","进程名称");
			/// <summary>
			/// 进程ID
			/// </summary>
			public readonly static Field pIdNum = new Field("pIdNum","zkpt_mm_processes","进程ID");
			/// <summary>
			/// 父进程ID
			/// </summary>
			public readonly static Field pParentIdNum = new Field("pParentIdNum","zkpt_mm_processes","父进程ID");
			/// <summary>
			/// 线程个数
			/// </summary>
			public readonly static Field pSum = new Field("pSum","zkpt_mm_processes","线程个数");
			/// <summary>
			/// 路径
			/// </summary>
			public readonly static Field pAddress = new Field("pAddress","zkpt_mm_processes","路径");
			/// <summary>
			/// 添加时间
			/// </summary>
			public readonly static Field pAddTime = new Field("pAddTime","zkpt_mm_processes","添加时间");
			/// <summary>
			/// 备注信息
			/// </summary>
			public readonly static Field pRemark = new Field("pRemark","zkpt_mm_processes","备注信息");
			/// <summary>
			/// 进程状态 0表示结束 1 标识正常
			/// </summary>
			public readonly static Field pIsStart = new Field("pIsStart","zkpt_mm_processes","进程状态 0表示结束 1 标识正常");
		}
		#endregion


	}
}

